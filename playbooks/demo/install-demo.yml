---

- hosts: localhost

  vars:
    - install_path: ../../build
    - db_host: localhost
    - db_user: hr
    - db_pass: hr
    - Brew_packages: 
      - python
      - npm
      - typescript
      - openjdk
      - maven
      - postgresql@15
    - install_homebrew_if_missing: false

  pre_tasks:
      - name: Ensuring Homebrew Is Installed
        stat:
          path: /opt/homebrew/bin/brew
        when: ansible_distribution=="MacOSX"
        register: homebrew_check
        when: ansible_distribution=="MacOSX"

      - name: Fail If Homebrew Is Not Installed and install_homebrew_if_missing Is False
        fail:
          msg: Homebrew is missing, install from http://brew.sh
        when:
          - ansible_distribution=="MacOSX"
          - not homebrew_check.stat.exists
          - not install_homebrew_if_missing

      - name: Installing Homebrew
        shell: /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        when:
          - ansible_distribution=="MacOSX"
          - not homebrew_check.stat.exists
          - install_homebrew_if_missing

  tasks:
    - name: Install packages
      ansible.builtin.package:
        name: "{{ item }}"
      become: true
      become_method: sudo
      when: ansible_distribution=="Ubuntu"
      tags:
        - install_package
      loop:
        - sysstat
        - python3-psycopg2
        - npm
        - node-typescript
        - openjdk-19-jre
        - maven
        - postgresql

    - name: Install packages Mac OS
      homebrew:
        name: "{{ item }}"
        state: present
      #become: true
      #become_method: sudo
      when: ansible_distribution=="MacOSX"
      tags:
        - install_package
      loop:
        - python
        - npm
        - typescript
        - openjdk
        - maven
        # - postgresql@16

    - name: Create dir core+demo
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      tags:
        - create_demo_openrestdb
      loop:
        - "{{ install_path }}/core"
        - "{{ install_path }}/demo/data"

    - name: Futureforms core npm install
      ansible.builtin.command:
        cmd: npm install
        creates: "../../src/core/node_modules"
      args:
        chdir: "../../src/core"
      tags:
        - npm_install_core

    - name: Futureforms demo npm install
      ansible.builtin.command:
        cmd: npm install
        creates: "../../src/demo/node_modules"
      args:
        chdir: "../../src/demo"
      tags:
        - npm_install_demo

    - name: Build Futureforms core
      ansible.builtin.command:
        cmd: npm run build
        creates: "{{ install_path }}/core/package.json"
      args:
        chdir: "../../src/core"
      tags:
        - build_core

    - name: Install Futureforms demo app packages based on package.json using the npm
      community.general.npm:
        path: "../../src/demo"
        state: present
      tags:
        - npm_install_demo

    - name: Create the postgres database user hr
      community.postgresql.postgresql_user:
        name: "{{ db_user }}"
        password: "{{ db_pass }}"
        state: present
      become: true
      become_method: sudo
      become_user: postgres
      tags:
        - create_hr_user
        - create_db

    - name: Create the postgres database hr
      community.postgresql.postgresql_db:
        name: "{{ db_user }}"
        owner: "{{ db_user }}"
        state: present
      become: true
      become_method: sudo
      become_user: postgres
      tags:
        - create_hr_db
        - create_db

    - name: Install the postgres hr schema objects
      community.postgresql.postgresql_db:
        name: hr
        state: restore
        target: ../../src/demo/data/datademo.sql
        login_host: "{{ db_host }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_pass }}"
      tags:
        - install_hr_schema_objects
        - create_db

    - name: Copy initial data.sql for archive
      ansible.builtin.copy:
        src: ../../src/demo/data/datademo.sql
        dest: "{{ install_path }}/demo/data/"
      tags:
        - copy_data_sql

    - name: Check database.js template exists
      stat:
        path: "{{ install_path }}/demo/bin"
      register: build_demo_openrestdb_bin
      tags:
        - build_demo_openrestdb_bin

    - name: Copy openrestdb template
      ansible.builtin.copy:
        src: "../../src/openrestdb/template/"
        dest: "{{ install_path }}/demo"
        mode: preserve
      when: build_demo_openrestdb_bin.stat.exists == false
      tags:
        - copy_openrestdb_template

    - name: Build openrestdb.jar
      ansible.builtin.command:
        cmd: mvn package
        creates: "../../src/openrestdb/target" 
      args:
        chdir: "../../src/openrestdb"
      tags:
        - build_openrestdb

    - name: Check openrestdb.jar exists
      stat:
        path: "{{ install_path }}/demo/lib/openrestdb-2.1.jar"
      register: check_demo_openrestdb_jar
      tags:
        - check_demo_openrestdb_jar

    - name: Copy openrestdb.jar
      ansible.builtin.copy:
        src: "../../src/openrestdb/target/openrestdb-2.1.jar"
        dest: "{{ install_path }}/demo/lib"
        mode: preserve
      when: check_demo_openrestdb_jar.stat.exists == false
      tags:
        - copy_openrestdb_jar

    - name: Build generator.jar
      ansible.builtin.command:
        cmd: mvn package
        creates: "../../src/generator/target" 
      args:
        chdir: "../../src/generator"
      tags:
        - build_generator

    - name: Build Futureforms demo app
      ansible.builtin.command:
        cmd: npm run build
        creates: "{{ install_path }}/demo/app/demo.js"
      args:
        chdir: "../../src/demo"
      tags:
        - npm_build_demo

    - name: Start openrestdb web-server
      ansible.builtin.command:
        cmd: ./bin/openrestdb start
        creates: "{{ install_path }}/demo/logs/inst00/server.log.0.lck"
      args:
        chdir: "{{ install_path }}/demo"
      tags:
        - start_openrestdb

# vim: tabstop=2 expandtab :
